on:
  workflow_call:
    inputs:
      name:
        type: string
        required: true
      directory:
        type: string
        default: "."
      repos:
        type: string
    secrets:
      TOKEN:
        required: true

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    uses: Geode-solutions/actions/.github/workflows/cpp-prepare.yml@master
    secrets: inherit

  tidy:
    needs: prepare
    runs-on: ubuntu-latest
    container: ghcr.io/geode-solutions/ubuntu:master
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache/restore@v4
        with:
          path: build/third_party
          key: ${{ runner.os }}-ubuntu-${{ hashFiles('cmake/Configure**.cmake') }}
      - uses: Geode-solutions/actions/get-release@master
        id: repos
        with:
          repository: ${{ inputs.repos }}
          file: "-ubuntu-private.tar.gz"
          token: ${{ secrets.TOKEN }}
          branch: ${{ github.event.pull_request.head.ref }}
      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH="${{ steps.repos.outputs.path }}" ..
          cmake --build . -t third_party -j 2
      - name: Tidy
        uses: ZedThree/clang-tidy-review@v0.18.0
        with:
          build_dir: ${{ github.workspace }}/build/${{ inputs.directory }}

  # sanitizers:
  #   needs: prepare
  #   runs-on: ubuntu-latest
  #   container: ghcr.io/geode-solutions/ubuntu:master
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/cache@v4
  #       with:
  #         path: build/third_party
  #         key: ${{ runner.os }}-clang-${{ hashFiles('cmake/Configure**.cmake') }}
  #     - uses: Geode-solutions/actions/get-release@master
  #       id: repos
  #       with:
  #         repository: ${{ inputs.repos }}
  #         file: "-ubuntu-private.tar.gz"
  #         token: ${{ secrets.TOKEN }}
  #         branch: ${{ github.event.pull_request.head.ref }}
  #     - name: Libraries
  #       id: libraries
  #       run: |
  #         new_path=$(echo "${{ steps.repos.outputs.path }}" | sed 's/\;/\/lib\:/g')
  #         echo "LD_LIBRARY_PATH=$new_path" >> $GITHUB_ENV
  #         echo "BASE_DIR=`pwd`" >> $GITHUB_ENV
  #     - name: Sanitizers
  #       run: |
  #         gh api https://api.github.com/repos/Geode-solutions/actions/contents/asan_suppressions.txt -H "Accept: application/vnd.github.raw" > asan_suppressions.txt
  #         mkdir -p build
  #         cd build
  #         cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH="${{ steps.repos.outputs.path }}" ..
  #         cmake --build . -t third_party
  #         cd ${{ inputs.directory }}
  #         cmake -DUSE_SANITIZER_ADDRESS=ON -DUSE_SANITIZER_LEAK=ON -DUSE_SANITIZER_UNDEFINED_BEHAVIOR=ON .
  #         cmake --build .
  #         ctest --output-on-failure -j 2
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.token }}
  #         GEODE_LICENSE_LOCATION: ${{ github.workspace }}/geode.lic
  #         LSAN_OPTIONS: suppressions=${{ env.BASE_DIR }}/asan_suppressions.txt
  #         ASAN_OPTIONS: detect_odr_violation=0
  #         CC: /usr/bin/clang
  #         CXX: /usr/bin/clang++

  test-repository:
    needs: prepare
    uses: Geode-solutions/actions/.github/workflows/cpp-test-repository.yml@master
    with:
      name: ${{ inputs.name }}
      directory: ${{ inputs.directory }}
      repos: ${{ inputs.repos }}
      light: ${{ github.event.pull_request.draft }}
      branch: ${{ github.event.pull_request.head.ref }}
    secrets: inherit

  release:
    runs-on: ubuntu-latest
    needs: [test-repository]
    steps:
      - name: Create Release
        uses: actions/github-script@v7
        with:
          script: |
            const refs = await github.rest.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "tags/${{ github.head_ref }}-tag"
            })
            console.log(refs)
            if(refs.data.length > 0) {
              console.log("Tag already exists, skipping release")
              return
            }
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "${{ github.head_ref }}-tag",
              name: "${{ github.head_ref }}",
              prerelease: true,
              target_commitish: "${{ github.head_ref }}"
            })
        env:
          GH_TOKEN: ${{ github.token }}

  deploy-repository:
    needs: release
    uses: Geode-solutions/actions/.github/workflows/cpp-deploy-repository.yml@master
    with:
      name: ${{ inputs.name }}
      directory: ${{ inputs.directory }}
      repos: ${{ inputs.repos }}
      version: "0.0.0"
      release: ${{ github.head_ref }}-tag
      upload-pypi: false
      light: true
    secrets: inherit
