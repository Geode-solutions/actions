name: "Install pip-compile"

inputs:
  folders:
    type: string
    required: true
  use_internal:
    type: boolean
    required: true

runs:
  using: "composite"
  steps:
    - name: "pip-compile"
      run: |
        IFS=';' read -ra folders <<< "${{ inputs.folders }}"
        for folder in "${folders[@]}"; do
          echo "Current folder: $folder"
          file_in=$folder/requirements.in
          if [ ! -f "$file_in" ]; then 
            exit 1
          fi
          file_internal_in=$folder/requirements-internal.in
          if [ ! -f "$file_in" ]; then 
            exit 1
          fi
          pip install pip-tools
          file_txt=$folder/requirements.txt
          if [ ${{ inputs.use_internal }} == "true" ]; then
            files_in="$file_in $file_internal_in"
          else
            files_in="$file_in"
          fi
          echo $GITHUB_REF_NAME
          if [ $GITHUB_REF_NAME == "master" ]; then
            pip-compile -v --upgrade $files_in --output-file $file_txt
          else
            pip-compile -v --pre --upgrade $files_in --output-file $file_txt
          fi
          echo "Updating versions in $file_txt from $file_internal_in"
          packages=$(grep -E '^[^#].+==' "$file_txt" | cut -d'=' -f1 || true)
          for package in $packages; do
              echo "Package: $package"
              pinned_version=""
              if grep -q "^$package==" "$file_internal_in" 2>/dev/null; then
                pinned_version=$(grep "^$package==" "$file_internal_in" | cut -d'=' -f3 || true)
                echo "Pinned version in $file_internal_in: $pinned_version"
              fi
              if [[ -z "$pinned_version" ]] && grep -q "^$package==" "$file_in" 2>/dev/null; then
                pinned_version=$(grep "^$package==" "$file_in" | cut -d'=' -f3 || true)
                echo "Pinned version in $file_in: $pinned_version"
              fi
              if [[ -n "$pinned_version" ]]; then
                echo "Skipping $package (pinned version: $pinned_version)"
                continue
              fi
              echo "Updating $package version in $file_txt"
              perl -i -pe 's|^(\Q'"$package"'\E)==(\d+)\.(\d+)\.(\d+)$|\1~=\2.0|' "$file_txt"
          done
          cat $file_txt
        done
      shell: bash
