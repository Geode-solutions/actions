on:
  workflow_call:
    outputs:
      node:
        value: ${{ jobs.config.outputs.node }}
      python:
        value: ${{ jobs.config.outputs.python }}
      docker:
        value: ${{ jobs.config.outputs.docker }}
    secrets:
      TOKEN:
        required: true
jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      node: ${{ steps.config.outputs.node }}
      python: ${{ steps.config.outputs.python }}
      docker: ${{ steps.config.outputs.docker }}
    steps:
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
      - name: Read config
        id: config
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs').promises;
            const defaults = {
              node: true,
              python: true,
              docker: false
            };
            const configFile = '.github/workflows/config.json';
            const outputFile = 'py-config.json';
            output_config = {};
            try {
              // Attempt to read and parse the config file
              const configData = await fs.readFile(configFile, 'utf8');
              const config = JSON.parse(configData);

              // Process each key
              for (const key of Object.keys(defaults)) {
                let value;
                if (config.hasOwnProperty(key)) {
                  value = config[key] !== null ? config[key] : 'null';
                  core.info(`${key}: ${value} (from config)`);
                } else {
                  value = defaults[key];
                  core.info(`${key}: ${value} (default)`);
                }
                core.setOutput(key, value);
                output_config[key] = value;
              }
            } catch (error) {
              // If config file doesn't exist or fails to parse, use defaults
              core.info(`Config file ${configFile} not found or invalid, using defaults: ${error.message}`);
              for (const key of Object.keys(defaults)) {
                core.info(`${key}: ${defaults[key]} (default)`);
                core.setOutput(key, defaults[key]);
                output_config[key] = defaults[key];
              }
            }
            await fs.writeFile(outputFile, JSON.stringify(outputConfig));
            core.info(`Created ${outputFile} with processed configuration`);
      - name: Upload processed config as artifact
        uses: actions/upload-artifact@v4
        with:
          name: processed-config
          path: processed-config.json