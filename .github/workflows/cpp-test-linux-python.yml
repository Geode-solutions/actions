on:
  workflow_call:
    inputs:
      name:
        type: string
        required: true
      directory:
        type: string
        default: "."
      repos:
        type: string
      light:
        type: boolean
        default: false
      type:
        type: string
        default: "Debug"
      branch:
        type: string
        default: ${{ github.ref }}
      wheels_from_pypi:
        type: boolean
        default: false
    secrets:
      TOKEN:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  linux-python:
    runs-on: ubuntu-latest
    container: "ghcr.io/geode-solutions/rhel:master"
    strategy:
      matrix:
        python: ["3.12"]
    env:
      CC: /opt/rh/gcc-toolset-12/root/usr/bin/gcc
      CXX: /opt/rh/gcc-toolset-12/root/usr/bin/g++
    steps:
      - name: Get info
        id: info
        run: |
          echo "tag=cp${{ matrix.python }}-cp${{ matrix.python }}" | sed 's/\.//g' >> $GITHUB_OUTPUT
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
      - uses: actions/cache/restore@v4
        with:
          path: build/third_party
          key: ${{ runner.os }}-rhel-${{ hashFiles('cmake/Configure**.cmake') }}
      - uses: Geode-solutions/actions/get-release@master
        id: repos
        with:
          repository: ${{ inputs.repos }}
          file: "-rhel-private.tar.gz"
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
      - name: Libraries
        id: libraries
        run: |
          new_path=$(echo "${{ steps.repos.outputs.path }}" | sed 's/\;/\/lib64\:/g')
          echo "LD_LIBRARY_PATH=$new_path" >> $GITHUB_ENV
          echo "PATH=/opt/python/${{ steps.info.outputs.tag }}/bin:$PATH" >> $GITHUB_ENV
      - uses: Geode-solutions/actions/get-release@master
        if: ${{ !inputs.wheels_from_pypi }}
        id: wheels
        with:
          repository: ${{ inputs.repos }}
          file: "-${{ steps.info.outputs.tag }}-manylinux_2_28_x86_64.whl"
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
      - name: "pip-compile"
        run: |
          file=bindings/python/requirements.in
          if [ ! -f "$file" ]; then 
            exit 0
          fi
          pip install pip-tools
          if [ ${{ inputs.branch }} == "master" ]; then
            pip-compile -v --upgrade $file
          else
            pip-compile -v --pre --upgrade $file
          fi
          sed -i -E 's/==(.+)\.(.+)\.(.+)/==\1\.*,>=\1\.\2\.\3/' bindings/python/requirements.txt
      - name: Wheels from Github
        if: ${{ !inputs.wheels_from_pypi }}
        run: |
          wheels=$(echo "${{ steps.wheels.outputs.path }}" | sed 's/\;/\ /g')
          echo $wheels
          if [ -n "$wheels" ]; then 
            pip install --no-deps $wheels
          fi
      - name: Wheels from Pypi
        if: ${{ inputs.wheels_from_pypi }}
        run: |
          requirements="bindings/python/requirements.txt"
          if [ -f "$requirements" ]; then 
            pip install --pre -r $requirements
          fi
      - name: Compile
        run: |
          mkdir -p build
          cd build
          cmake -G "Ninja" -DCMAKE_BUILD_TYPE=${{ inputs.type }} -DCMAKE_PREFIX_PATH="${{ steps.repos.outputs.path }}" -D${{ inputs.name }}_WITH_PYTHON:BOOL=ON -DPYTHON_VERSION:STRING=${{ matrix.python }} ..
          cmake --build .
          cd ${{ inputs.directory }}
          ctest --output-on-failure -R -py- -j 2
          echo "LD_LIBRARY_PATH=" >> $GITHUB_ENV
        env:
          GEODE_LICENSE_LOCATION: ${{ github.workspace }}/geode.lic
      - name: Wheels from Github in venv
        if: ${{ !inputs.wheels_from_pypi }}
        run: |
          wheels=$(echo "${{ steps.wheels.outputs.path }}" | sed 's/\;/\ /g')
          echo $wheels
          if [ -n "$wheels" ]; then 
            build/${{ inputs.directory }}/wheel/venv/bin/pip install --no-deps $wheels
          fi
      - name: Wheels from Pypi in venv
        if: ${{ inputs.wheels_from_pypi }}
        run: |
          requirements="bindings/python/requirements.txt"
          if [ -f "$requirements" ]; then 
            build/${{ inputs.directory }}/wheel/venv/bin/pip install --pre -r $requirements
          fi
      - name: Compile wheel
        run: |
          cd build/${{ inputs.directory }}
          cmake --build . --target wheel
          cmake --build . --target test-wheel
