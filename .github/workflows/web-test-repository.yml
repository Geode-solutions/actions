on:
  workflow_call:
    inputs:
      repos:
        type: string
      branch:
        type: string
        default: ${{ github.ref }}
      docker:
        type: string
        required: true
      python:
        type: string
        required: true
      node:
        type: string
        required: true
      integration:
        type: string
        required: true
      browser:
        type: string
        required: true
      desktop:
        type: string
        required: true
      # cloud:
      #   type: boolean
      #   required: true
      microservices:
        type: string
        default: "microservices"
    secrets:
      TOKEN:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  test-python:
    if: inputs.python == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
      - name: Test Python 
        uses: Geode-solutions/actions/test/python@master
        with:
          repos: ${{ inputs.repos }}
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}

  test-node:
    if: inputs.node == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
      - name: Install dependencies 
        uses: Geode-solutions/actions/install/node-dependencies@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}
      - name: Test
        run: |
          npm run test

  test-integration:
    if: inputs.integration == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
      - name: Install dependencies 
        uses: Geode-solutions/actions/install/node-dependencies@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}
      - name: Install Microservices 
        uses: Geode-solutions/actions/install/microservices@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}
          microservices: ${{ inputs.microservices }}
      - name: Test
        run: |
          npm run test:integration

  test-browser:
    if: inputs.browser == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
      - name: Install dependencies 
        uses: Geode-solutions/actions/install/node-dependencies@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}
      - name: Install Microservices 
        uses: Geode-solutions/actions/install/microservices@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}
          microservices: ${{ inputs.microservices }}
      - name: Install Playwright
        uses: Geode-solutions/actions/install/playwright@master
      - name: Build
        run: |
          npm run build:browser
      - name: Test on Linux
        if: runner.os == 'Linux'
        run: |
          xvfb-run -n 99 --server-args="-screen 0 1280x960x24" npm run test:e2e:browser
        env:
          DEBUG: "pw:browser"
      - name: Test on Windows
        if: runner.os == 'Windows'
        run: |
          npm run test:e2e:browser
        env:
          DEBUG: "pw:browser"
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-browser-${{ runner.os }}
          path: playwright-report/

  test-desktop:
    if: inputs.desktop == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
      - name: Install dependencies 
        uses: Geode-solutions/actions/install/node-dependencies@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}
      - name: Install Microservices 
        uses: Geode-solutions/actions/install/microservices@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}
          microservices: ${{ inputs.microservices }}
      - name: Install Azure Sign Tool
        uses: Geode-solutions/actions/install/azure-sign@master
      - name: Install Playwright
        uses: Geode-solutions/actions/install/playwright@master
      - name: Build
        run: |
          npm run build:microservices
          npm run build:desktop
        env:
          AZURE_KEY_VAULT_URI: ${{ secrets.AZURE_KEY_VAULT_URI }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CERT_NAME: ${{ secrets.AZURE_CERT_NAME }}
      - name: Test on Linux
        if: runner.os == 'Linux'
        run: |
          sudo chown root:root ./release/0.0.0/linux-unpacked/chrome-sandbox
          sudo chmod 4755 ./release/0.0.0/linux-unpacked/chrome-sandbox
          xvfb-run -n 99 --server-args="-screen 0 1280x960x24" npm run test:e2e:desktop
        env:
          DEBUG: "pw:browser"
      - name: Test on Windows
        if: runner.os == 'Windows'
        run: |
          npm run test:e2e:desktop
        env:
          DEBUG: "pw:browser"
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-desktop-${{ runner.os }}
          path: playwright-report/

  test-docker:
    if: inputs.docker == 'true'
    uses: Geode-solutions/actions/.github/workflows/docker-build-squash-push.yml@master
    with:
      tag: test
      upload: false
    secrets:
      TOKEN: ${{ secrets.TOKEN }}
