on:
  workflow_call:
    inputs:
      name:
        type: string
        required: true
      directory:
        type: string
        default: "."
      repos:
        type: string
      version:
        type: string
        required: true
      release:
        type: string
        required: true
      extra:
        type: string
        default: ""
      branch:
        type: string
        default: ${{ github.ref }}
    secrets:
      TOKEN:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  linux:
    runs-on: ubuntu-latest
    container: ghcr.io/geode-solutions/${{ matrix.system }}:master
    strategy:
      matrix:
        include:
          - system: rhel
            cc: /opt/rh/gcc-toolset-12/root/usr/bin/gcc
            cxx: /opt/rh/gcc-toolset-12/root/usr/bin/g++
          - system: ubuntu
            cc: /usr/bin/clang
            cxx: /usr/bin/clang++
    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
    steps:
      - name: Get info
        id: info
        run: |
          echo "name=${{ matrix.system }}" >> $GITHUB_OUTPUT
          if [ "${{ matrix.system }}" = "rhel" ]; then
            echo "lib=lib64" >> $GITHUB_OUTPUT
          else
            echo "lib=lib" >> $GITHUB_OUTPUT
          fi
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
      - uses: actions/cache/restore@v4
        with:
          path: build/third_party
          key: ${{ runner.os }}-${{ steps.info.outputs.name }}-${{ hashFiles('cmake/Configure**.cmake') }}
      - uses: Geode-solutions/actions/get-release@master
        id: repos
        with:
          repository: ${{ inputs.repos }}
          file: "-${{ steps.info.outputs.name }}-private.tar.gz"
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
      - name: Libraries
        id: libraries
        run: |
          new_path=$(echo "${{ steps.repos.outputs.path }}" | sed 's/\;/\/${{ steps.info.outputs.lib }}\:/g')
          echo "LD_LIBRARY_PATH=$new_path" >> $GITHUB_ENV
      - name: Generate package
        run: |
          mkdir -p build
          cd build
          cmake -G "Ninja" ${{ inputs.extra }} -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_PREFIX_PATH="${{ steps.repos.outputs.path }}" -D${{ inputs.name }}_WITH_TESTS:BOOL=OFF -DINCLUDE_PYBIND11:BOOL=ON -DCPACK_PACKAGE_VERSION:STRING=${{ inputs.version }} -DCPACK_SYSTEM_NAME:STRING=${{ steps.info.outputs.name }} ..
          cmake --build . -j 2
          cd ${{ inputs.directory }}
          cpack -D CPACK_COMPONENTS_ALL="public;private" .
          for i in *.tar.gz; do mv $i $(echo $i | sed 's/\.tar\.gz/\-private\.tar\.gz/g'); done
          cmake --build . --target package
      - name: Upload
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          files="build/${{ inputs.directory }}/*.tar.gz"
          for file in $files
          do
            echo $file
            counter=0
            for i in 1 2 3 4 5; do gh release upload --clobber --repo $GITHUB_REPOSITORY ${{ inputs.release }} $file && break || counter=$[$counter +1] && sleep 30; done
            echo $counter
            if [ "$counter" -eq "5" ]; then exit 1; fi
          done
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Doc
        shell: bash
        if: matrix.system == 'ubuntu' && github.ref == 'refs/heads/master'
        run: |
          repo_name=${GITHUB_REPOSITORY##*/}
          repo_name=${repo_name%_private}
          repo_name=${repo_name,,}
          docs_path="/docs"

          cd build/${{ inputs.directory }}
          jq 'map(select(.file | test("/private/"; "i") | not))' compile_commands.json > public_compile_commands.json
          clang-doc-19 --output=doc --doxygen --public --format=md --executor=all-TUs public_compile_commands.json
          cd doc/geode
          curl -H "Accept: application/vnd.github.VERSION.raw" -H "Authorization: token ${{ secrets.TOKEN }}" https://api.github.com/repos/Geode-solutions/actions/contents/doc/style.py\?ref\=master > style.py
          python3 style.py .

          git clone https://github.com/Geode-solutions/docs $docs_path
          cd $docs_path
          git checkout master
          git pull 
          doc_folder=$docs_path/references/$repo_name
          rm -rf $doc_folder
          mkdir -p $doc_folder
          cp -r $GITHUB_WORKSPACE/build/${{ inputs.directory }}/doc/geode/* $doc_folder

          changes=$(git status --porcelain 2>/dev/null | wc -l)
          if [ "$changes" -ne "0" ]; then
              git config user.email $GITHUB_ACTOR@users.noreply.github.com
              git config user.name $GITHUB_ACTOR
              git add --all
              git commit -m "Update $repo_name documentation"
              git push https://${{ secrets.TOKEN }}@github.com/Geode-solutions/docs master
          fi
