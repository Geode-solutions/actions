on:
  workflow_call:
    inputs:
      name:
        type: string
        required: true
      directory:
        type: string
        default: "."
      repos:
        type: string
      version:
        type: string
        required: true
      light:
        type: boolean
        default: false
      release:
        type: string
        required: true
      wheels_from_pypi:
        type: boolean
        default: false
      upload-pypi:
        type: boolean
        default: true
      branch:
        type: string
        default: ${{ github.ref_name }}
    secrets:
      TOKEN:
        required: true
      SLACK_WEBHOOK_URL:
        required: true
      PYPI_TOKEN:
        required: true

jobs:
  windows-python:
    runs-on: windows-2022
    strategy:
      matrix:
        python: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          - python: ${{ inputs.light && '3.9' || 'dummy' }}
          - python: ${{ inputs.light && '3.10' || 'dummy' }}
          - python: ${{ inputs.light && '3.11' || 'dummy' }}
    steps:
      - name: Get info
        id: info
        run: |
          $tag = "cp${{ matrix.python }}-cp${{ matrix.python }}"
          $tag = $tag.Replace(".", "")
          echo "tag=$tag" >> $env:GITHUB_OUTPUT
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
      - name: Install dependencies
        uses: Geode-solutions/actions/install/cpp-dependencies@master
        id: repos
        with:
          repos: ${{ inputs.repos }}
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
          system: win64
          save: false
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - uses: Geode-solutions/actions/get-release@master
        if: ${{ !inputs.wheels_from_pypi }}
        id: wheels
        with:
          repository: ${{ inputs.repos }}
          file: "-${{ steps.info.outputs.tag }}-win_amd64.whl"
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
      - name: "pip-compile"
        run: |
          file=bindings/python/requirements.in
          if [ ! -f "$file" ]; then 
            exit 0
          fi
          pip install pip-tools
          echo $GITHUB_REF_NAME
          if [ $GITHUB_REF_NAME == "master" ]; then
            pip-compile -v --upgrade $file
          else
            pip-compile -v --pre --upgrade $file
          fi
          sed -i -E 's/==(.+)\.(.+)\.(.+)/==\1\.*,>=\1\.\2\.\3/' bindings/python/requirements.txt
        shell: bash
      - uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64
      - name: Compile
        run: |
          if(!(test-path build)) { mkdir build }
          cd build
          cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH:PATH="${{ steps.repos.outputs.path }}" -D${{ inputs.name }}_WITH_TESTS:BOOL=OFF -DWHEEL_VERSION:STRING=${{ inputs.version }} -D${{ inputs.name }}_WITH_PYTHON:BOOL=ON -DPYTHON_VERSION:STRING=${{ matrix.python }} ..
          cmake --build .
      - name: Wheels from Github in venv
        if: ${{ !inputs.wheels_from_pypi }}
        run: |
          $wheels ="${{ steps.wheels.outputs.path }}"
          if($wheels) {
            Foreach($wheel in $wheels.split(";")){
              build/${{ inputs.directory }}/wheel/venv/Scripts/pip install --no-deps $wheel
            }
          }
      - name: Wheels from Pypi in venv
        if: ${{ inputs.wheels_from_pypi }}
        run: |
          $requirements = "bindings/python/requirements.txt"
          if(test-path -Path $requirements -PathType Leaf) {
            build/${{ inputs.directory }}/wheel/venv/Scripts/pip install --pre -r $requirements
          }
      - name: Compile wheel
        run: |
          cd build/${{ inputs.directory }}
          cmake --build . --target wheel
      - name: Upload GH
        run: |
          Get-ChildItem -Path "build/${{ inputs.directory }}/wheel/dist" -Filter *.whl | Foreach-Object { gh release upload --clobber --repo ${env:GITHUB_REPOSITORY} ${{ inputs.release }} $_.FullName }
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: PyPI
        if: inputs.upload-pypi
        run: |
          pip install twine
          twine upload -u __token__ -p ${{ secrets.PYPI_TOKEN }} --skip-existing --verbose build/${{ inputs.directory }}/wheel/dist/*.whl
