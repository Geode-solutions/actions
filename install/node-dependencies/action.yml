name: "Install Node dependencies"

inputs:
  repos:
    type: string
    required: true
  branch:
    type: string
    required: true
  tarballs:
    type: string
  use_registry:
    type: boolean
    required: true
  token:
    type: string
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v4
      with:
        registry-url: "https://registry.npmjs.org"
        node-version: 22
    - uses: Geode-solutions/actions/get-release@master
      if: ${{ inputs.tarballs == '' && inputs.use_registry == 'false' }}
      id: tarballs
      with:
        repository: ${{ inputs.repos }}
        file: ".tgz"
        token: ${{ inputs.token }}
        branch: ${{ inputs.branch }}
    - name: Get tarballs
      id: result
      run: |
        if [ -n "${{ inputs.tarballs }}" ]; then
          echo "tarballs=${{ inputs.tarballs }}" >> $GITHUB_OUTPUT
        elif [ -n "${{ steps.tarballs.outputs.path }}" ]; then
          echo "tarballs=${{ steps.tarballs.outputs.path }}" >> $GITHUB_OUTPUT
        else
          echo "tarballs=" >> $GITHUB_OUTPUT
        fi
        if [ "${{ inputs.branch }}" == "master" ]; then
          jq '.dependencies |= with_entries(if .value == "0.0.0" then .value = "latest" else . end)' package.json > temp.json
        elif [ "${{ inputs.branch }}" == "next" ]; then
          jq '.dependencies |= with_entries(if .value == "0.0.0" then .value = "next" else . end)' package.json > temp.json
        else
          jq 'del(.dependencies | .[] | select(. == "0.0.0"))' package.json > temp.json
        fi
        mv temp.json package.json
        cat package.json
      shell: bash
    - name: Install dependencies
      run: |
        cp package.json package.json.bak
        tarballs=$(echo "${{ steps.result.outputs.tarballs }}" | sed 's/\;/\ /g')
        echo "Tarballs = $tarballs"
        if [ -n "$tarballs" ]; then
          npm install --no-install $tarballs
        fi
        overrides=$(jq -r '.dependencies | to_entries | map(select(.value | startswith("file:"))) | map({key: .key, value: .value}) | from_entries' package.json)
        if [ -n "$overrides" ] && [ "$overrides" != "{}" ]; then
          # Merge existing overrides (if any) with new overrides
          jq --argjson newOverrides "$overrides" '.overrides = (.overrides // {}) * $newOverrides' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Updated package.json with local file dependencies in overrides"
        fi
        npm install --no-package-lock
        npm list --depth=0 || true
        mv package.json.bak package.json
      shell: bash
