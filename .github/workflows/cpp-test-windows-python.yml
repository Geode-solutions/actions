on:
  workflow_call:
    inputs:
      name:
        type: string
        required: true
      directory:
        type: string
        default: "."
      repos:
        type: string
      light:
        type: boolean
        default: false
      type:
        type: string
        default: "Debug"
      branch:
        type: string
        default: ${{ github.ref_name }}
      wheels_from_pypi:
        type: boolean
        default: false
    secrets:
      TOKEN:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  windows-python:
    runs-on: windows-2022
    strategy:
      matrix:
        python: ["3.12"]
    steps:
      - name: Get info
        id: info
        run: |
          $tag = "cp${{ matrix.python }}-cp${{ matrix.python }}"
          $tag = $tag.Replace(".", "")
          echo "tag=$tag" >> $env:GITHUB_OUTPUT
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
      - name: Install dependencies
        uses: Geode-solutions/actions/install/cpp-dependencies@master
        id: repos
        with:
          repos: ${{ inputs.repos }}
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
          system: win64
          save: false
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Libraries
        id: libraries
        run: |
          $old_path = "${{ steps.repos.outputs.path }}"
          $bin_path = $old_path.replace(";", "\bin;")
          echo "bin=$bin_path" >> $env:GITHUB_OUTPUT
          $share_path = $old_path.replace(";", "\share;")
          echo "share=$share_path" >> $env:GITHUB_OUTPUT
      - uses: Geode-solutions/actions/get-release@master
        if: ${{ !inputs.wheels_from_pypi }}
        id: wheels
        with:
          repository: ${{ inputs.repos }}
          file: "-${{ steps.info.outputs.tag }}-win_amd64.whl"
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
      - name: "pip-compile"
        run: |
          file=bindings/python/requirements.in
          if [ ! -f "$file" ]; then 
            exit 0
          fi
          pip install pip-tools
          if [ ${{ inputs.branch }} == "master" ]; then
            pip-compile -v --upgrade $file
          else
            pip-compile -v --pre --upgrade $file
          fi
          sed -i -E 's/==(.+)\.(.+)\.(.+)/==\1\.*,>=\1\.\2\.\3/' bindings/python/requirements.txt
        shell: bash
      - name: Wheels from Github
        if: ${{ !inputs.wheels_from_pypi }}
        run: |
          $wheels ="${{ steps.wheels.outputs.path }}"
          if($wheels) {
            Foreach($wheel in $wheels.split(";")){
              pip install --no-deps $wheel
            }
          }
      - name: Wheels from Pypi
        if: ${{ inputs.wheels_from_pypi }}
        run: |
          $requirements = "bindings/python/requirements.txt"
          if(test-path -Path $requirements -PathType Leaf) {
            pip install --pre -r $requirements
          }
      - uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64
      - name: Compile & Test
        run: |
          if(!(test-path build)) { 
            mkdir build
          }
          cd build
          cmake -G "Ninja" -DCMAKE_BUILD_TYPE=${{ inputs.type }} -DCMAKE_PREFIX_PATH="${{ steps.repos.outputs.path }}" -D${{ inputs.name }}_WITH_PYTHON:BOOL=ON -DPYTHON_VERSION:STRING=${{ matrix.python }} ..
          cmake --build .
          cd ${{ inputs.directory }}
          $paths = "${{ steps.libraries.outputs.bin }}"
          echo $paths
          Foreach($path in $paths.split(";")){
            if(Test-Path -Path $path) {
              Copy-Item -Path $path\* -Destination bin
            }
          }
          if(!(test-path share)) { 
            mkdir share
          }
          $shares = "${{ steps.libraries.outputs.share }}"
          echo $shares
          Foreach($share in $shares.split(";")){
            if(Test-Path -Path $share) {
              echo $share
              Copy-Item -Path $share\* -Destination share -Recurse
            }
          }
      - name: Wheels from Github in venv
        if: ${{ !inputs.wheels_from_pypi }}
        run: |
          $wheels ="${{ steps.wheels.outputs.path }}"
          if($wheels) {
            Foreach($wheel in $wheels.split(";")){
              build/${{ inputs.directory }}/wheel/venv/Scripts/pip install --no-deps $wheel
            }
          }
      - name: Wheels from Pypi in venv
        if: ${{ inputs.wheels_from_pypi }}
        run: |
          $requirements = "bindings/python/requirements.txt"
          if(test-path -Path $requirements -PathType Leaf) {
            build/${{ inputs.directory }}/wheel/venv/Scripts/pip install --pre -r $requirements
          }
      - name: Compile wheel
        run: |
          cd build/${{ inputs.directory }}
          ctest --output-on-failure -R -py- -j 2
          cmake --build . --target wheel
          cmake --build . --target test-wheel
        env:
          GEODE_LICENSE_LOCATION: ${{ github.workspace }}/geode.lic
