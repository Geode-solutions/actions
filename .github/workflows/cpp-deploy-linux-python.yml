on:
  workflow_call:
    inputs:
      name:
        type: string
        required: true
      directory:
        type: string
        default: "."
      repos:
        type: string
      version:
        type: string
        required: true
      light:
        type: boolean
        default: false
      release:
        type: string
        required: true
      upload-pypi:
        type: boolean
        default: true
      branch:
        type: string
        default: ${{ github.ref }}
    secrets:
      TOKEN:
        required: true
      SLACK_WEBHOOK_URL:
        required: true
      PYPI_TOKEN:
        required: true

jobs:
  linux-python:
    runs-on: ubuntu-latest
    container: "ghcr.io/geode-solutions/rhel:master"
    strategy:
      matrix:
        python: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          - python: ${{ inputs.light && '3.9' || 'dummy' }}
          - python: ${{ inputs.light && '3.10' || 'dummy' }}
          - python: ${{ inputs.light && '3.11' || 'dummy' }}
    steps:
      - name: Get info
        id: info
        run: |
          echo "tag=cp${{ matrix.python }}-cp${{ matrix.python }}" | sed 's/\.//g' >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
      - uses: actions/cache/restore@v4
        with:
          path: build/third_party
          key: ${{ runner.os }}-rhel-${{ hashFiles('cmake/Configure**.cmake') }}
      - uses: Geode-solutions/actions/get-release@master
        id: repos
        with:
          repository: ${{ inputs.repos }}
          file: "-rhel-private.tar.gz"
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
      - name: Libraries
        id: libraries
        run: |
          new_path=$(echo "${{ steps.repos.outputs.path }}" | sed 's/\;/\/lib64\:/g')
          echo "LD_LIBRARY_PATH=$new_path" >> $GITHUB_ENV
          echo "PATH=/opt/python/${{ steps.info.outputs.tag }}/bin:$PATH" >> $GITHUB_ENV
      - name: "pip-compile"
        run: |
          file=bindings/python/requirements.in
          if [ ! -f "$file" ]; then 
            exit 0
          fi
          pip install pip-tools
          echo $GITHUB_REF_NAME
          if [ $GITHUB_REF_NAME == "master" ]; then
            pip-compile -v --upgrade $file
          else
            pip-compile -v --pre --upgrade $file
          fi
          sed -i -E 's/==(.+)\.(.+)\.(.+)/==\1\.*,>=\1\.\2\.\3/' bindings/python/requirements.txt
      - name: Compile
        run: |
          mkdir -p build
          cd build
          cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH:PATH="${{ steps.repos.outputs.path }}" -D${{ inputs.name }}_WITH_PYTHON:BOOL=ON -DPYTHON_VERSION:STRING=${{ matrix.python }} -DWHEEL_VERSION:STRING=${{ inputs.version }} -D${{ inputs.name }}_WITH_TESTS:BOOL=OFF ..
          cmake --build . -j 2
          cd ${{ inputs.directory }}
          cmake --build . --target wheel --config Release
          cd wheel/dist
          rename linux manylinux_2_28 *.whl
      - name: PyPI
        if: inputs.upload-pypi
        run: |
          pip install twine
          twine upload -u __token__ -p ${{ secrets.PYPI_TOKEN }} --skip-existing --verbose build/${{ inputs.directory }}/wheel/dist/*.whl
      - name: Upload GH
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          files="build/${{ inputs.directory }}/wheel/dist/*.whl"
          for file in $files
          do
            echo $file
            counter=0
            for i in 1 2 3 4 5; do gh release upload --clobber --repo $GITHUB_REPOSITORY ${{ inputs.release }} $file && break || counter=$[$counter +1] && sleep 30; done
            echo $counter
            if [ "$counter" -eq "5" ]; then exit 1; fi
          done
        env:
          GITHUB_TOKEN: ${{ github.token }}
