on:
  workflow_call:
    inputs:
      repos:
        type: string
      branch:
        type: string
        default: ${{ github.ref }}
      version:
        type: string
        required: true
      release:
        type: string
        required: true
      release_channel:
        type: string
        required: true
      docker:
        type: boolean
        required: true
      python:
        type: boolean
        required: true
      node:
        type: boolean
        required: true
      desktop:
        type: boolean
        required: true
      upload:
        type: boolean
        default: true
      microservices_path:
        type: string
        default: "microservices"
    secrets:
      TOKEN:
        required: true
      SLACK_WEBHOOK_URL:
        required: true
      PYPI_TOKEN:
        required: true

jobs:
  release-python:
    if: inputs.python
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: Geode-solutions/actions/get-release@master
        id: wheels
        with:
          repository: ${{ inputs.repos }}
          file: ".whl"
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
      - name: Install dependencies
        run: |
          sed -i 's/version = "[0-9]*\.[0-9]*\.[0-9]*\(-rc\.[0-9]*\)\?"/version = "${{ inputs.version }}"/' pyproject.toml
          pip install --extra-index-url https://wheels.vtk.org .[cpu]
          wheels=$(echo "${{ steps.wheels.outputs.path }}" | sed 's/\;/\ /g')
          echo "all wheels = $wheels"
          if [ -n "$wheels" ]; then 
            for wheel in $wheels; do
              pip install --extra-index-url https://wheels.vtk.org $wheel
            done
          fi
          pip list
        shell: bash
      - name: Build
        run: |
          python3 -m pip install --upgrade build
          python3 -m build
      - name: Upload GH
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          files="dist/*.whl"
          for file in $files
          do
            echo $file
            counter=0
            for i in 1 2 3 4 5; do gh release upload --clobber --repo $GITHUB_REPOSITORY ${{ inputs.release }} $file && break || counter=$[$counter +1] && sleep 30; done
            echo $counter
            if [ "$counter" -eq "5" ]; then exit 1; fi
          done
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload PYPI
        if: inputs.upload
        run: |
          python3 -m pip install twine==6.0.1
          python3 -m twine upload --repository pypi dist/* -u __token__ -p ${{ secrets.PYPI_TOKEN }}

  release-node:
    if: inputs.node
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}
      - uses: Geode-solutions/actions/install-node-dependencies@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}
      - name: Build
        id: build
        run: |
          npm --no-git-tag-version --allow-same-version version ${{ inputs.version }}
          npm run build
          npm pack
          package_name=$(jq -r '.name' package.json)
          version=$(jq -r '.version' package.json)
          tarball=$(echo "$package_name" | sed 's/@//' | sed 's/\//-/')-${version}.tgz
          echo "tarball=$tarball" >> $GITHUB_OUTPUT
      - name: Upload GH
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          counter=0
          for i in 1 2 3 4 5; do gh release upload --clobber --repo $GITHUB_REPOSITORY ${{ inputs.release }} ${{ steps.build.outputs.tarball }} && break || counter=$[$counter +1] && sleep 30; done
          echo $counter
          if [ "$counter" -eq "5" ]; then exit 1; fi
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload NPM
        if: inputs.upload
        run: |
          if [ -n "${{ inputs.release_channel }}" ]; then
            npm publish "${{ steps.build.outputs.tarball }}" --tag ${{ inputs.release_channel }}
          else
            npm publish "${{ steps.build.outputs.tarball }}"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release-desktop:
    if: inputs.desktop
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: Geode-solutions/actions/install-node-dependencies@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}
      - uses: Geode-solutions/actions/install-microservices@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}
          microservices_path: ${{ inputs.microservices_path }}
      - name: Install Azure Sign Tool
        if: ${{ runner.os == 'Windows' }}
        run: dotnet tool install --global AzureSignTool --version 4.0.1
      - name: Package
        run: |
          jq '.version = "${{ inputs.version }}"' package.json > temp && mv temp package.json
          npm run build:microservices
          npm run package
        env:
          AZURE_KEY_VAULT_URI: ${{ secrets.AZURE_KEY_VAULT_URI }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CERT_NAME: ${{ secrets.AZURE_CERT_NAME }}
      - name: Release
        run: |
          cd release/${{ inputs.version }}
          gh release upload v${{ inputs.version }} vease* latest* --clobber

  release-docker:
    if: inputs.docker
    uses: Geode-solutions/actions/.github/workflows/docker-build-squash-push.yml@master
    with:
      tag: ${{ inputs.upload && github.ref_name || 'test' }}
      upload: ${{ inputs.upload }}
    secrets:
      TOKEN: ${{secrets.TOKEN}}

  notify:
    if: ${{ !failure() && !cancelled() }}
    uses: Geode-solutions/actions/.github/workflows/cpp-deploy-notify.yml@master
    needs: [release-python, release-node, release-docker, release-desktop]
    secrets: inherit
