on:
  workflow_call:
    inputs:
      directory:
        type: string
        default: "."
      repos:
        type: string
      light:
        type: boolean
        default: false
      type:
        type: string
        default: "Debug"
      branch:
        type: string
        default: ${{ github.ref }}
    secrets:
      TOKEN:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  setup-linux-systems:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix based on inputs.light
        id: set-matrix
        run: |
          if [ "${{ inputs.light }}" == "true" ]; then
            # Exclude rhel when light is true
            echo 'matrix={"include":[{"system":"ubuntu","cc":"/usr/bin/clang","cxx":"/usr/bin/clang++"}]}' >> $GITHUB_OUTPUT
          else
            # Include both rhel and ubuntu
            echo 'matrix={"include":[{"system":"rhel","cc":"/opt/rh/gcc-toolset-12/root/usr/bin/gcc","cxx":"/opt/rh/gcc-toolset-12/root/usr/bin/g++"},{"system":"ubuntu","cc":"/usr/bin/clang","cxx":"/usr/bin/clang++"}]}' >> $GITHUB_OUTPUT
          fi

  linux:
    runs-on: ubuntu-latest
    needs: setup-linux-systems
    container: ghcr.io/geode-solutions/${{ matrix.system }}:master
    strategy:
      matrix: ${{ fromJson(needs.setup-linux-systems.outputs.matrix) }}
    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
    steps:
      - name: Get info
        id: info
        run: |
          echo "name=${{ matrix.system }}" >> $GITHUB_OUTPUT
          if [ "${{ matrix.system }}" = "rhel" ]; then
            echo "lib=lib64" >> $GITHUB_OUTPUT
          else
            echo "lib=lib" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - uses: actions/cache@v4
        with:
          path: build/third_party
          key: ${{ runner.os }}-${{ steps.info.outputs.name }}-${{ hashFiles('cmake/Configure**.cmake') }}
      - uses: Geode-solutions/actions/get-release@master
        id: repos
        with:
          repository: ${{ inputs.repos }}
          file: "-${{ steps.info.outputs.name }}-private.tar.gz"
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
      - name: Libraries
        id: libraries
        run: |
          new_path=$(echo "${{ steps.repos.outputs.path }}" | sed 's/\;/\/${{ steps.info.outputs.lib }}\:/g')
          echo "LD_LIBRARY_PATH=$new_path" >> $GITHUB_ENV
      - name: Compile
        run: |
          mkdir -p build
          cd build
          cmake -G "Ninja" -DCMAKE_BUILD_TYPE=${{ inputs.type }} -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_PREFIX_PATH="${{ steps.repos.outputs.path }}" ..
          cmake --build . -t third_party
          cd ${{ inputs.directory }}
          cmake --build . -t essential
          cmake --build . -t install
        env:
          GEODE_LICENSE_LOCATION: ${{ github.workspace }}/geode.lic
      - name: Test
        run: |
          rm -rf $GITHUB_WORKSPACE/build/${{ inputs.directory }}/bin
          mkdir -p test
          cd test
          cmake -G "Ninja" -DCMAKE_BUILD_TYPE=${{ inputs.type }} -DCMAKE_PREFIX_PATH:PATH="${{ steps.repos.outputs.path }};$GITHUB_WORKSPACE/build/${{ inputs.directory }}/install;$GITHUB_WORKSPACE/build" ../tests
          cmake --build .
          ctest --output-on-failure --no-tests=error -j 2 -LE unstable
        env:
          GEODE_LICENSE_LOCATION: ${{ github.workspace }}/geode.lic
