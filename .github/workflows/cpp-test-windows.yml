on:
  workflow_call:
    inputs:
      directory:
        type: string
        default: "."
      repos:
        type: string
      light:
        type: boolean
        default: false
      type:
        type: string
        default: "Debug"
      branch:
        type: string
        default: ${{ github.ref }}
    secrets:
      TOKEN:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  windows:
    runs-on: windows-2022
    strategy:
      matrix:
        shared: ["ON"]
    steps:
      - name: Get info
        id: info
        run: |
          if( "${{ matrix.shared }}" -eq "ON" ) {
            echo "name=win64" >> $env:GITHUB_OUTPUT
          }
          else {
            echo "name=win64-static" >> $env:GITHUB_OUTPUT
          }
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      # - uses: actions/cache@v4
      #   with:
      #     path: build/third_party
      #     key: ${{ runner.os }}-${{ steps.info.outputs.name }}-${{ hashFiles('cmake/Configure**.cmake') }}
      - uses: Geode-solutions/actions/get-release@master
        id: repos
        with:
          repository: ${{ inputs.repos }}
          file: "-${{ steps.info.outputs.name }}-private.zip"
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
      - name: Libraries
        id: libraries
        run: |
          $old_path = "${{ steps.repos.outputs.path }}"
          $bin_path = $old_path.replace(";", "\bin;")
          echo "bin=$bin_path" >> $env:GITHUB_OUTPUT
          $share_path = $old_path.replace(";", "\share;")
          echo "share=$share_path" >> $env:GITHUB_OUTPUT
      - uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64
      - name: Compile & Test
        run: |
          if(!(test-path build)) { mkdir build }
          cd build
          cmake -G "Ninja" -DCMAKE_BUILD_TYPE=${{ inputs.type }} -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }} -DCMAKE_PREFIX_PATH="${{ steps.repos.outputs.path }}" ..
          cmake --build . -t third_party
          cd ${{ inputs.directory }}
          $paths = "${{ steps.libraries.outputs.bin }}"
          echo $paths
          Foreach($path in $paths.split(";")){
            if(Test-Path -Path $path) {
              Copy-Item -Path $path\* -Destination bin
            }
          }
          if(!(test-path share)) { 
            mkdir share
          }
          $shares = "${{ steps.libraries.outputs.share }}"
          echo $shares
          Foreach($share in $shares.split(";")){
            if(Test-Path -Path $share) {
              Copy-Item -Path $share\* -Destination share -Recurse
            }
          }
          if( "${{ matrix.shared }}" -eq "ON" ) {
            cmake --build . -j 2
            cmake --build . -t install
            ctest --output-on-failure --no-tests=error -j 2 -LE unstable
          }else{
            cmake --build . -t essential -j 2 -LE unstable
            if(!$?) { cmake --build . -t essential -j 1 -LE unstable}
            cmake --build . -t install
            ctest --output-on-failure --no-tests=error -j 2 -L essential -LE unstable
          }
        env:
          GEODE_LICENSE_LOCATION: ${{ github.workspace }}/geode.lic
