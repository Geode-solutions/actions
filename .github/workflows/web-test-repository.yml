on:
  workflow_call:
    inputs:
      repos:
        type: string
      branch:
        type: string
        default: ${{ github.ref_name }}
      docker:
        type: string
        required: true
      python:
        type: string
        required: true
      node:
        type: string
        required: true
      integration:
        type: string
        required: true
      browser:
        type: string
        required: true
      desktop:
        type: string
        required: true
      # cloud:
      #   type: boolean
      #   required: true
      microservices:
        type: string
        default: "microservices"
    secrets:
      TOKEN:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  test-python:
    if: inputs.python == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
      - name: Test Python
        uses: Geode-solutions/actions/test/python@master
        with:
          repos: ${{ inputs.repos }}
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}

  test-node:
    if: inputs.node == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
      - name: Test Node
        uses: Geode-solutions/actions/test/node@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}

  test-integration:
    if: inputs.integration == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
      - name: Test Integration
        uses: Geode-solutions/actions/test/integration@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}
          microservices: ${{ inputs.microservices }}

  test-browser:
    if: inputs.browser == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
      - name: Test Browser
        uses: Geode-solutions/actions/test/browser@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}
          microservices: ${{ inputs.microservices }}

  test-desktop:
    if: inputs.desktop == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
      - name: Install dependencies
        uses: Geode-solutions/actions/install/node-dependencies@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}
      - name: Install Microservices
        uses: Geode-solutions/actions/install/microservices@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}
          microservices: ${{ inputs.microservices }}
      - name: Test Desktop
        uses: Geode-solutions/actions/test/desktop@master
        with:
          repos: ${{ inputs.repos }}
          branch: ${{ inputs.branch }}
          token: ${{ secrets.TOKEN }}
          microservices: ${{ inputs.microservices }}
          AZURE_KEY_VAULT_URI: ${{ secrets.AZURE_KEY_VAULT_URI }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CERT_NAME: ${{ secrets.AZURE_CERT_NAME }}

  test-docker:
    if: inputs.docker == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: Geode-solutions/actions/install/checkout@master
        with:
          token: ${{ secrets.TOKEN }}
      - name: Build docker
        uses: Geode-solutions/actions/build/docker@master
        id: docker
        with:
          tag: test
